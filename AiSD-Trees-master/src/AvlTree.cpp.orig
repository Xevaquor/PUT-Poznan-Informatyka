<<<<<<< HEAD
#include "AvlTree.h"


avl_node *root;




/*

* Height Difference

*/





/*

* Right- Right Rotation

*/



/*

* Left- Left Rotation

*/





/*

* Left - Right Rotation

*/





/*

* Right- Left Rotation

*/





/*

* Balancing AVL Tree

*/





/*

* Insert Element into the tree

*/



/*

* Display AVL Tree

*/



/*

* Inorder Traversal of AVL Tree

*/



/*

* Preorder Traversal of AVL Tree

*/




/*

* Postorder Traversal of AVL Tree

*/
=======
//#include "AvlTree.h"
//#include <algorithm>
//
//using namespace std;
//
//Tree::Tree()
//{
//	root = NULL;   //stworzenie pustego drzewa
//}
//
//Tree::~Tree()
//{
//	wyczysc_drzewo(root);
//}
//void Tree::wyczysc_drzewo(Node *n)
//{
//	if (n != NULL)
//	{ //rekurencyjne czyszczenie pamieci
//		wyczysc_drzewo(n->left);
//		wyczysc_drzewo(n->right);
//		delete n;
//	}
//}
//void Tree::dodaj(int x)
//{
//	Node *newNode, *temp, *back, *ancestor;
//	newNode = new Node;
//	newNode->key = x;
//
//	temp = root;
//	back = NULL;
//	ancestor = NULL;
//
//	if (root == NULL)
//	{
//		newNode->parent = root;;
//		newNode->right = NULL;
//		newNode->left = NULL;
//		newNode->bf = 0;
//		root = newNode;
//		return;
//	}
//
//	while (temp != NULL) //dopoki nie znajdzie wolnego miejsca
//	{
//		back = temp;
//
//		if (temp->bf != 0)
//			ancestor = temp; //ancestora ustawiamy od galezi ktora jest bliska byciu niezrownowazona
//
//		if (newNode->key < temp->key)
//			temp = temp->left;
//		else
//			temp = temp->right;
//	}
//	//back jest teraz rodzicem
//
//	newNode->parent = back;
//	if (newNode->key < back->key)
//	{
//		back->left = newNode;
//	}
//	else
//	{
//		back->right = newNode;
//	}
//
//
//	przywroc_drzewo(ancestor, newNode);
//}
//
//void Tree::przywroc_drzewo(Node *ancestor, Node *newNode)
//{
//
//	if (ancestor == NULL) //ancestor nie zosta³ ustawiony czyli drzewo jest idealnie wywazone
//	{
//		if (newNode->key < root->key)       //zmiana bf rota na lewy lub prawy
//			root->bf = -1;
//		else
//			root->bf = 1;
//
//		ustaw_bf(root, newNode); //pierwszay argument nie jest zmieniany wiec ^^
//	}
//
//
//	else if (((ancestor->bf == -1) && (newNode->key >= ancestor->key)) ||
//		((ancestor->bf == 1) && (newNode->key <= ancestor->key)))      //wstawienie wyrownalo poziom przodka 
//	{
//		ancestor->bf = 0;
//		ustaw_bf(ancestor, newNode);
//	}
//
//	//przodek przewazony na prawo i nowy dolozony na prawo -rotacja RR 
//	else if ((ancestor->bf == 1) && (newNode->key > ancestor->right->key))
//	{
//		ancestor->bf = 0; //po rotacji RR galaz jest zrownowazona
//		rotacjaRR(ancestor);
//		ustaw_bf(ancestor->parent, newNode); //aktualizacja bfow od rodzica przodka do nowego wierzcholka
//	}
//
//	//przypadek wczesniejszy ale na odwrot
//	else if ((ancestor->bf == -1) && (newNode->key < ancestor->left->key))
//	{
//		ancestor->bf = 0;
//		rotacjaLL(ancestor);
//		ustaw_bf(ancestor->parent, newNode);
//	}
//
//	//Rotacja LR
//	else if ((ancestor->bf == -1) && (newNode->key > ancestor->left->key))
//	{
//
//		rotacjaRR(ancestor->left);
//		rotacjaLL(ancestor);
//		ustaw_po_LR(ancestor, newNode); //aktualka bf
//	}
//
//	//Rotacja RL
//	else
//	{
//
//		rotacjaLL(ancestor->right);
//		rotacjaRR(ancestor);
//		ustaw_po_RL(ancestor, newNode);
//	}
//}
//
//
//void Tree::ustaw_bf(Node *end, Node *start)
//{
//	Node *temp = start->parent; //zaczynamy od rodzica nowo dodanego wierzcholka
//	while (temp != end)
//	{
//		if (start->key < temp->key)
//			temp->bf = -1;
//		else
//			temp->bf = 1;
//		temp = temp->parent;
//	}
//}
//
//void Tree::rotacjaRR(Node *n)
//{
//	Node *temp = n->right;  //zapisujemy wskaznik na element ktory wyladuje u gory
//	n->right = temp->left;      //po prawej bylego ancestora dajemy to co po lewej nowego
//	if (temp->left != NULL)     //jezeli nowy ancestor mial cos po lewej to zmieniamy rodzica tego czegos po lewej
//		temp->left->parent = n;
//
//	if (n->parent == NULL)       //jezeli n jest rootem
//	{
//		root = temp;      //to nowym rootem jest prawy syn starego roota xD 
//		temp->parent = NULL;   // root oczywiscie nie ma rodzica :(
//	}
//
//	else if (n->parent->left == n) //je¿eli n by³ lewym synem (bekartem)
//		n->parent->left = temp;   // to nowy ancestor tez bedzie lewym
//	else               // a prawy
//		n->parent->right = temp;// prawym
//
//	temp->left = n;         //na lewo nowego ancestora wrzucamy bylego
//	n->parent = temp;         // i ustawiamy ojca bylego na nowego
//	//co za moda na sukces
//}
//
//void Tree::rotacjaLL(Node *n) //odbicie lustrzane rotacji RR
//{
//	Node *temp = n->left;
//	n->left = temp->right;
//	if (temp->right != NULL)
//		temp->right->parent = n;
//
//	if (n->parent == NULL)
//	{
//		root = temp;
//		temp->parent = NULL;
//	}
//
//	else if (n->parent->left == n) //je¿eli n by³ lewym synem (bekartem)
//		n->parent->left = temp;   // to nowy ancestor tez bedzie lewym
//	else               // a prawy
//		n->parent->right = temp;// prawym
//
//	temp->right = n;
//	n->parent = temp;
//
//}
//void Tree::ustaw_po_LR(Node *end, Node *start)
//{
//	if (end == root)
//		end->bf = 0;
//
//	else if (start->key < end->parent->key) //naleza do innych poddrzew
//	{
//		end->bf = 1;
//		ustaw_bf(end->parent->left, start);
//	}
//	else
//	{
//		end->bf = 0;
//		end->parent->left->bf = -1;
//		ustaw_bf(end, start);
//	}
//}
//
//void Tree::ustaw_po_RL(Node *end, Node *start)
//{
//	if (end == root)
//		end->bf = 0;
//
//	else if (start->key > end->parent->key) //naleza do innych poddrzew
//	{
//		end->bf = -1;
//		ustaw_bf(end->parent->right, start);
//	}
//	else
//	{
//		end->bf = 0;
//		end->parent->right->bf = 1;
//		ustaw_bf(end, start);
//	}
//}
//
//int Tree::znajdz_min()
//{
//	Node *start = root;
//	while (start->left != NULL) start = start->left;
//
//	return start->key;
//}
//
//Node* Tree::znajdz_po_kluczu(int key){
//	Node *start = root;
//	if (start == NULL) return NULL;
//
//	while (start->key != key){
//		if (start->left == NULL && key<start->key) return NULL;
//		if (start->right == NULL && key>start->key) return NULL;
//		if (key<start->key) start = start->left;
//		else start = start->right;
//	}
//
//	return start;
//}
//
//Node *Tree::usun(int x){
//	Node *tmp = znajdz_po_kluczu(x);
//	Node *pom = NULL;
//	if (tmp != NULL){
//
//
//
//
//		//1 przypadek: jedno dziecko lub 0
//		if ((tmp->left == NULL) || (tmp->right == NULL))
//		{
//			if (tmp->left != NULL) pom = tmp->left;
//			else if (tmp->right != NULL) pom = tmp->right;
//
//			// brak dzieci
//			if (pom == NULL)
//			{
//				pom = tmp;
//				tmp = NULL;
//			}
//			else //jedno dziecko
//				pom->parent = tmp->parent;
//			*tmp = *pom;
//
//
//		}
//		else // dwojka dzieci
//		{
//
//			pom = tmp->right;
//			while (pom->left != NULL) // wyszukiwanie min z prawego poddzrewa
//				pom = pom->left;
//
//			tmp->key = pom->key;
//
//			// Delete the inorder successor
//			tmp->right = usun(pom->key);
//		}
//		delete pom;
//
//		if (tmp == NULL)
//			return tmp;
//
//		// STEP 2: UPDATE HEIGHT OF THE CURRENT NODE
//		tmp->bf = max(height(root->left), height(root->right)) + 1;
//
//		// STEP 3: GET THE BALANCE FACTOR OF THIS NODE (to check whether
//		//  this node became unbalanced)
//		int balance = getBalance(root);
//
//		// If this node becomes unbalanced, then there are 4 cases
//
//		// Left Left Case
//		if (balance > 1 && getBalance(root->left) >= 0)
//			return rightRotate(root);
//
//		// Left Right Case
//		if (balance > 1 && getBalance(root->left) < 0)
//		{
//			root->left = leftRotate(root->left);
//			return rightRotate(root);
//		}
//
//		// Right Right Case
//		if (balance < -1 && getBalance(root->right) <= 0)
//			return leftRotate(root);
//
//		// Right Left Case
//		if (balance < -1 && getBalance(root->right) > 0)
//		{
//			root->right = rightRotate(root->right);
//			return leftRotate(root);
//		}
//
//		return root;
//	}
//
//}
//
//
////------------------------------------------------------------------
//
//void Tree::PrintTree()
//{
//	cout << "\nPrinting the tree...\n";
//	cout << "Root Node: " << root->key << " balanceFactor is " <<
//		root->bf << "\n\n";
//	Print(root);
//}
//
////------------------------------------------------------------------
//
//void Tree::Print(Node *n)
//{
//	if (n != NULL)
//	{
//		cout << "Node: " << n->key << " balanceFactor is " <<
//			n->bf << "\n";
//		if (n->left != NULL)
//		{
//			cout << "\t moving left\n";
//			Print(n->left);
//			cout << "Returning to Node" << n->key << " from its' left subtree\n";
//		}
//		else
//		{
//			cout << "\t left subtree is empty\n";
//		}
//		cout << "Node: " << n->key << " balanceFactor is " <<
//			n->bf << "\n";
//		if (n->right != NULL)
//		{
//			cout << "\t moving right\n";
//			Print(n->right);
//			cout << "Returning to Node" << n->key << " from its' right subtree\n";
//		}
//		else
//		{
//			cout << "\t right subtree is empty\n";
//		}
//	}
//}
>>>>>>> 28a75dface63ac44d9411bfeaf4a87307a382afd
